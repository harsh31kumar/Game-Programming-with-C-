#include <sstream>
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>

using namespace sf;

void updateBranches(int seed);

const int NUM_BRANCHES = 6;
Sprite branches[NUM_BRANCHES];
enum class side { LEFT, RIGHT, NONE };
side branchPositions[NUM_BRANCHES];

int main() {
    srand(static_cast<unsigned>(time(0)));  // Seed once at the start

    // Create window
    VideoMode vm(1920, 1080);
    RenderWindow window(vm, "Timber!!");

    // Background
    Texture textureBackground;
    textureBackground.loadFromFile("graphics/background.png");
    Sprite spriteBackground(textureBackground);
    spriteBackground.setPosition(0, 0);

    // Tree
    Texture textureTree;
    textureTree.loadFromFile("graphics/tree.png");
    Sprite spriteTree(textureTree);
    spriteTree.setPosition(810, 0);

    // Bee
    Texture textureBee;
    textureBee.loadFromFile("graphics/bee.png");
    Sprite spriteBee(textureBee);
    spriteBee.setPosition(0, 800);
    float beeSpeed = 0.0f;
    bool beeActive = false;

    // Clouds
    Texture textureCloud;
    textureCloud.loadFromFile("graphics/cloud.png");
    Sprite spriteCloud1(textureCloud), spriteCloud2(textureCloud), spriteCloud3(textureCloud);
    spriteCloud1.setPosition(0, 0);
    spriteCloud2.setPosition(0, 250);
    spriteCloud3.setPosition(0, 350);
    float cloudSpeed1 = 100.0f, cloudSpeed2 = -75.0f, cloudSpeed3 = 120.0f;

    // Player
    Texture texturePlayer;
    texturePlayer.loadFromFile("graphics/player.png");
    Sprite spritePlayer(texturePlayer);
    spritePlayer.setPosition(580, 720);
    side playerSide = side::LEFT;

    // Axe
    Texture textureAxe;
    textureAxe.loadFromFile("graphics/axe.png");
    Sprite spriteAxe(textureAxe);
    const float AXE_POSITION_LEFT = 700, AXE_POSITION_RIGHT = 1075;

    // Log
    Texture textureLog;
    textureLog.loadFromFile("graphics/log.png");
    Sprite spriteLog(textureLog);
    spriteLog.setPosition(810, 720);
    bool logActive = false;
    float logSpeedX = 1000, logSpeedY = -1500;

    // Death sprite
    Texture textureRIP;
    textureRIP.loadFromFile("graphics/rip.png");
    Sprite spriteRIP(textureRIP);
    spriteRIP.setPosition(600, 2000);  // Off-screen initially

    // Fire sprite
    Texture textureFire;
    textureFire.loadFromFile("graphics/fire.png");
    Sprite spriteFire(textureFire);
    spriteFire.setPosition(600, 2000);  // Off-screen initially

    // Time Bar
    RectangleShape timeBar(Vector2f(400, 80));
    timeBar.setFillColor(Color::Red);
    timeBar.setPosition(760, 980);
    float timeRemaining = 6.0f, timeBarWidthPerSecond = 400 / timeRemaining;

    // Game State
    bool paused = true, acceptInput = false;
    int score = 0;

    // Text UI
    Font font;
    font.loadFromFile("font/KOMIKAP_.ttf");
    Text messageText("Press Enter to start!", font, 75);
    Text scoreText("Score = 0", font, 100);
    messageText.setFillColor(Color::Green);
    scoreText.setFillColor(Color::Red);
    messageText.setPosition(960, 540);
    scoreText.setPosition(20, 20);

    // Branches
    Texture textureBranch;
    textureBranch.loadFromFile("graphics/branch.png");
    for (int i = 0; i < NUM_BRANCHES; i++) {
        branches[i].setTexture(textureBranch);
        branches[i].setPosition(-2000, -2000);
    }

    // Sounds
    SoundBuffer chopBuffer, deathBuffer, ootBuffer;
    chopBuffer.loadFromFile("sound/chop.wav");
    deathBuffer.loadFromFile("sound/death.wav");
    ootBuffer.loadFromFile("sound/out of time.wav");
    Sound chop(chopBuffer), death(deathBuffer), outOfTime(ootBuffer);

    updateBranches(1);

    Clock clock;

    while (window.isOpen()) {
        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed) {
                window.close();
            }
            if (event.type == Event::KeyReleased && !paused) {
                acceptInput = true;
                spriteAxe.setPosition(2000, spriteAxe.getPosition().y);
            }
        }

        if (Keyboard::isKeyPressed(Keyboard::Escape)) window.close();
        if (Keyboard::isKeyPressed(Keyboard::Return)) {
            paused = false;
            score = 0;
            timeRemaining = 6;
            for (int i = 1; i < NUM_BRANCHES; i++) branchPositions[i] = side::NONE;
            spriteRIP.setPosition(600, 2000);
            spriteFire.setPosition(600, 2000);
            spritePlayer.setPosition(580, 720);
            acceptInput = true;
        }

        if (acceptInput) {
            if (Keyboard::isKeyPressed(Keyboard::Right)) {
                playerSide = side::RIGHT;
                score++;
                timeRemaining += (2.0f / score) + 0.15;
                spriteAxe.setPosition(AXE_POSITION_RIGHT, spriteAxe.getPosition().y);
                spritePlayer.setPosition(1200, 720);
                updateBranches(score);
                chop.play();
                acceptInput = false;
            }
            if (Keyboard::isKeyPressed(Keyboard::Left)) {
                playerSide = side::LEFT;
                score++;
                timeRemaining += (2.0f / score) + 0.15;
                spriteAxe.setPosition(AXE_POSITION_LEFT, spriteAxe.getPosition().y);
                spritePlayer.setPosition(580, 720);
                updateBranches(score);
                chop.play();
                acceptInput = false;
            }
        }

        if (!paused) {
            Time dt = clock.restart();
            timeRemaining -= dt.asSeconds();
            timeBar.setSize(Vector2f(timeBarWidthPerSecond * timeRemaining, 80));

            if (timeRemaining <= 0) {
                paused = true;
                messageText.setString("Out of Time!");
                outOfTime.play();
            }
        }

        if (branchPositions[5] == playerSide) {
            paused = true;
            spriteRIP.setPosition(525, 760);
            spriteFire.setPosition(525, 760);
            spritePlayer.setPosition(2000, 660);
            messageText.setString("SQUISHED!!");
            death.play();
        }

        window.clear();
        window.draw(spriteBackground);
        window.draw(spriteTree);
        window.draw(spriteCloud1);
        window.draw(spriteCloud2);
        window.draw(spriteCloud3);
        window.draw(spritePlayer);
        window.draw(spriteAxe);
        window.draw(spriteLog);
        window.draw(spriteBee);
        window.draw(scoreText);
        window.draw(timeBar);
        if (paused) window.draw(messageText);
        window.display();
    }

    return 0;
}

